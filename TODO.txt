- XML::XXPath: avoid duplicates in path.all(node) result arrays when
  using the descendants ("//") axis

- XML::XXPath: generalize foo[@x='bar'] to foo[<any XPath
  expression>='bar'] (unless create/create_new implementation proves
  to be too difficult, but I don't think it will...)

- invent an XPath-like language for Ruby object trees (i.e. a language
  that is to Ruby object trees what XPath is to XML trees). Use
  expressions in that language as a generalization of "attribute
  names" (e.g. the 1st parameter to single attribute node factory
  methods). The language could more or less be Ruby itself, but the
  write support could need some extra work...

- node types: get rid of initialize_impl. Instead, have initializers
  return the remaining arguments, so initializers can call superclass
  initializers directly

- XML::XXPath: implement [attrname='attrvalue'] steps

- documentation:

  - README:

    - 

    - multiple mappings per mapping class

    - multi-attribute nodes, :writer/:reader (TODO: impl)

      - using :writer/:reader in nodes other than Node to
        shortcut/deactivate parts of their functionality

    - new XML::XXPath features, incl. issues when writing (solution:
      use :writer)

    - document/show usage of default_when_xpath_err outside node type
      implementations

  - README_XPATH:

    - mention new step types, new axes, xml/xpath_methods


- XML::XXPath/XML::Mapping: support for XML namespaces in XML::XXPath
  (match nodes with specific namespaces only) and XML::Mapping
  (use_namespace etc.)

- add streaming input/output to XML::Mapping, i.e. SAX-based input in
  addition to the current REXML/DOM - based one. Probably won't be
  implementable for some more complicated XPaths -- raise meaningful
  exceptions in those cases.

- XML::XXPath/XML::Mapping: add XML text nodes (the sub-node of an
  element node that contains that element's text) first-class to
  XML::XXPath. Use it for things like text_node :contents, "text()".

  Along those lines: promote XPath node "unspecifiedness" from an
  attribute to a REXML node object of "unspecified" class that's
  turned into an attribute/element/text node when necessary

- (eventually, maybe) provide a "scaffolding" feature to automatically
  turn a dtd/schema into a set of node type definitions or even a set
  of mapping classes
